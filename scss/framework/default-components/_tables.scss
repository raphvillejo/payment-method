// SCSS File
// tables.scss


// tables style
@if $component-table {
	.table {
		width: 100%;
		margin-bottom: $table-margin-y;
		color: $table-color;
		background-color: $table-bg; // Reset for nesting within parents with 'background-color'.
		th,
		td {
			padding: $table-cell-padding;
			vertical-align: top;
			border-top: $table-border-width solid $table-border-color;
		}

		thead th {
			vertical-align: bottom;
			border-bottom: (2 * $table-border-width) solid $table-border-color;
		}

		tbody + tbody {
			border-top: (2 * $table-border-width) solid $table-border-color;
		}
	}

	@if $component-table-small {
		// table-sm
		.table-sm {
			th,
			td {
				padding: $table-cell-padding-sm;
			}
		}
	}

	@if $component-table-bordered {
		// table-bordered
		.table-bordered {
			border: $table-border-width solid $table-border-color;

			th,
			td {
				border: $table-border-width solid $table-border-color;
			}

			thead {
				th,
				td {
					border-bottom-width: 2 * $table-border-width;
				}
			}
		}
	}

	@if $component-table-borderless {
		// table-borderless
		.table-borderless {
			th,
			td,
			thead th,
			tbody + tbody {
				border: 0;
			}
		}
	}

	@if $component-table-striped {
		// table-striped
		.table-striped {
			tbody tr:nth-of-type(#{$table-striped-order}) {
				background-color: $table-accent-bg;
			}
		}
	}

	@if $component-table-hover {
		// table-hover
		.table-hover {
			tbody tr {
				@include hover {
					color: $table-hover-color;
					background-color: $table-hover-bg;
				}
			}
		}
	}

	@if $component-table-variants {
		// table variants
		@each $color, $value in $theme-colors {
			@include table-row-variant($color, theme-color-level($color, $table-bg-level), theme-color-level($color, $table-border-level));
		}
	}

	@if $component-table-variants-row {
		// table row variants
		@include table-row-variant(active, $table-active-bg);
	}

	@if $component-table-thead-dark {
		// table thead-dark
		.table {
			.thead-dark {
				th {
					color: $table-dark-color;
					background-color: $table-dark-bg;
					border-color: $table-dark-border-color;
				}
			}

			.thead-light {
				th {
					color: $table-head-color;
					background-color: $table-head-bg;
					border-color: $table-border-color;
				}
			}
		}
	}

	@if $component-table-dark {
		// table-dark
		.table-dark {
			color: $table-dark-color;
			background-color: $table-dark-bg;

			th,
			td,
			thead th {
				border-color: $table-dark-border-color;
			}

			&.table-bordered {
				border: 0;
			}

			&.table-striped {
				tbody tr:nth-of-type(odd) {
					background-color: $table-dark-accent-bg;
				}
			}

			&.table-hover {
				tbody tr {
					@include hover {
						color: $table-dark-hover-color;
						background-color: $table-dark-hover-bg;
					}
				}
			}
		}
	}

	@if $component-table-responsive {
		// table-responsive
		.table-responsive {
			@each $breakpoint in map-keys($grid-breakpoints) {
				$next: breakpoint-next($breakpoint, $grid-breakpoints);
				$infix: breakpoint-infix($next, $grid-breakpoints);

				&#{$infix} {
					@include media-breakpoint-down($breakpoint) {
						display: block;
						width: 100%;
						overflow-x: auto;
						-webkit-overflow-scrolling: touch;
						// Prevent double border on horizontal scroll due to use of 'display: block;'
						> .table-bordered {
							border: 0;
						}
					}
				}
			}
		}
	}
}
